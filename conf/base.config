/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Base Config for Resource Allocation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config for setting base resources allocation from nf-core using reusable labels
----------------------------------------------------------------------------------------
*/
process {
    cpus   = { 1     * task.attempt }
    memory = { 4.GB  * task.attempt }
    time   = { 4.h   * task.attempt }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel: process_single {
        cpus   = { 1                    }
        memory = { 4.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
    }
    withLabel: process_low {
        cpus   = { 2     * task.attempt }
        memory = { 8.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
    }
    withLabel: process_medium {
        cpus   = { 4     * task.attempt }
        memory = { 24.GB * task.attempt }
        time   = { 8.h   * task.attempt }
    }
    withLabel: process_high {
        cpus   = { 8     * task.attempt }
        memory = { 48.GB * task.attempt }
        time   = { 16.h  * task.attempt }
    }
    withLabel: process_long {
        time   = { 20.h  * task.attempt }
    }
    withLabel: process_high_memory {
        memory = { 90.GB * task.attempt }
    }
    withLabel: error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }
}
